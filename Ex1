1.1)

1.
Circle
/** Constructs a Circle instance with the given radius and color */
public Circle(double radius, String color) {
   this.radius = radius;
   this.color = color;
}

Test
Circle c3 = new Circle(3.0, "blue");
System.out.println("The circle has radius of " 
   + c3.getRadius() + " and the color of " + c3.getColor());

2.
Circle
/** Returns the color */
public String getColor() {
   return color;
}

Test
System.out.println("Color of c3: " + c3.getColor());

3.
Test
System.out.println(c1.radius);  // Erreur !
c1.radius = 5.0;  // Erreur !

4.
Circle
/** Sets the radius */
public void setRadius(double radius) {
   this.radius = radius;
}

/** Sets the color */
public void setColor(String color) {
   this.color = color;
}

Test
Circle c4 = new Circle();   // Instance par d√©faut
c4.setRadius(5.5);          // Modifier radius
System.out.println("radius is: " + c4.getRadius()); 

c4.setColor("green");       // Modifier color
System.out.println("color is: " + c4.getColor());  

5.
Circle
/** Default constructor */
public Circle() {
   this.radius = 1.0;
   this.color = "red";
}

/** Constructor with radius */
public Circle(double radius) {
   this.radius = radius;
   this.color = "red";
}

/** Constructor with radius and color */
public Circle(double radius, String color) {
   this.radius = radius;
   this.color = color;
}

/** Setter for radius */
public void setRadius(double radius) {
   this.radius = radius;
}

/** Setter for color */
public void setColor(String color) {
   this.color = color;
}

6.
Circle
/** Return a self-descriptive string of this instance */
@Override
public String toString() {
   return "Circle[radius=" + radius + ", color=" + color + "]";
}

Test
Circle c5 = new Circle(5.5);
System.out.println(c5.toString());   // Appel explicite

Circle c6 = new Circle(6.6);
System.out.println(c6);              // Appel implicite (println appelle toString())
System.out.println("Circle info: " + c6);  // '+' appelle aussi toString()


